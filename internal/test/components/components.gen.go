// Package components provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/tamj0rd2/oapi-codegen version (devel) DO NOT EDIT.
package components

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/tamj0rd2/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Has additional properties of type int
type AdditionalPropertiesObject1 struct {
	Id                   int            `json:"id"`
	Name                 string         `json:"name"`
	Optional             *string        `json:"optional,omitempty"`
	AdditionalProperties map[string]int `json:"-"`
}

// Does not allow additional properties
type AdditionalPropertiesObject2 struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}

// Allows any additional property
type AdditionalPropertiesObject3 struct {
	Name                 string                 `json:"name"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Has anonymous field which has additional properties
type AdditionalPropertiesObject4 struct {
	Inner                AdditionalPropertiesObject4_Inner `json:"inner"`
	Name                 string                            `json:"name"`
	AdditionalProperties map[string]interface{}            `json:"-"`
}

// AdditionalPropertiesObject4_Inner defines model for AdditionalPropertiesObject4.Inner.
type AdditionalPropertiesObject4_Inner struct {
	Name                 string                 `json:"name"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Has additional properties with schema for dictionaries
type AdditionalPropertiesObject5 struct {
	AdditionalProperties map[string]SchemaObject `json:"-"`
}

// Array of object with additional properties
type AdditionalPropertiesObject6 []AdditionalPropertiesObject6_Item

// AdditionalPropertiesObject6_Item defines model for AdditionalPropertiesObject6.Item.
type AdditionalPropertiesObject6_Item struct {
	AdditionalProperties map[string]SchemaObject `json:"-"`
}

// simple anyOf case
type AnyOfObject1 struct {
	union json.RawMessage
}

// ObjectWithJsonField defines model for ObjectWithJsonField.
type ObjectWithJsonField struct {
	Name   string          `json:"name"`
	Value1 json.RawMessage `json:"value1"`
	Value2 json.RawMessage `json:"value2,omitempty"`
}

// oneOf with references and no disciminator
type OneOfObject1 struct {
	union json.RawMessage
}

// fixed properties, variable required - will compile, but not much sense
type OneOfObject10 struct {
	One   *string `json:"one,omitempty"`
	Three *bool   `json:"three,omitempty"`
	Two   *int    `json:"two,omitempty"`
	union json.RawMessage
}

// OneOfObject100 defines model for .
type OneOfObject100 interface{}

// OneOfObject101 defines model for .
type OneOfObject101 interface{}

// oneOf with inline elements
type OneOfObject2 struct {
	union json.RawMessage
}

// OneOfObject20 defines model for .
type OneOfObject20 struct {
	Name *string `json:"name,omitempty"`
}

// OneOfObject21 defines model for .
type OneOfObject21 []float32

// OneOfObject22 defines model for .
type OneOfObject22 bool

// inline OneOf
type OneOfObject3 struct {
	Union *OneOfObject3_Union `json:"union,omitempty"`
}

// OneOfObject3_Union defines model for OneOfObject3.Union.
type OneOfObject3_Union struct {
	union json.RawMessage
}

// oneOf plus fixed type - custom marshaling/unmarshaling
type OneOfObject4 struct {
	FixedProperty *string `json:"fixedProperty,omitempty"`
	union         json.RawMessage
}

// oneOf with disciminator but no mapping
type OneOfObject5 struct {
	union json.RawMessage
}

// oneOf with discriminator and mapping
type OneOfObject6 struct {
	union json.RawMessage
}

// array of oneOf
type OneOfObject7 []OneOfObject7_Item

// OneOfObject7_Item defines model for OneOfObject7.Item.
type OneOfObject7_Item struct {
	union json.RawMessage
}

// oneOf with fixed properties
type OneOfObject8 struct {
	Fixed *string `json:"fixed,omitempty"`
	union json.RawMessage
}

// oneOf with fixed descriminator
type OneOfObject9 struct {
	Type  string `json:"type"`
	union json.RawMessage
}

// OneOfVariant1 defines model for OneOfVariant1.
type OneOfVariant1 struct {
	Name string `json:"name"`
}

// OneOfVariant2 defines model for OneOfVariant2.
type OneOfVariant2 []int

// OneOfVariant3 defines model for OneOfVariant3.
type OneOfVariant3 bool

// OneOfVariant4 defines model for OneOfVariant4.
type OneOfVariant4 struct {
	Discriminator string `json:"discriminator"`
	Name          string `json:"name"`
}

// OneOfVariant5 defines model for OneOfVariant5.
type OneOfVariant5 struct {
	Discriminator string `json:"discriminator"`
	Id            int    `json:"id"`
}

// OneOfVariant6 defines model for OneOfVariant6.
type OneOfVariant6 struct {
	Values OneOfVariant2 `json:"values"`
}

// SchemaObject defines model for SchemaObject.
type SchemaObject struct {
	FirstName string `json:"firstName"`
	Role      string `json:"role"`
}

// ResponseObject defines model for ResponseObject.
type ResponseObject struct {
	Field SchemaObject `json:"Field"`
}

// RequestBody defines model for RequestBody.
type RequestBody struct {
	Field SchemaObject `json:"Field"`
}

// ParamsWithAddPropsParams_P1 defines parameters for ParamsWithAddProps.
type ParamsWithAddPropsParams_P1 struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ParamsWithAddPropsParams defines parameters for ParamsWithAddProps.
type ParamsWithAddPropsParams struct {
	// This parameter has additional properties
	P1 ParamsWithAddPropsParams_P1 `json:"p1"`

	// This parameter has an anonymous inner property which needs to be
	// turned into a proper type for additionalProperties to work
	P2 struct {
		Inner ParamsWithAddPropsParams_P2_Inner `json:"inner"`
	} `json:"p2"`
}

// ParamsWithAddPropsParams_P2_Inner defines parameters for ParamsWithAddProps.
type ParamsWithAddPropsParams_P2_Inner struct {
	AdditionalProperties map[string]string `json:"-"`
}

// BodyWithAddPropsJSONBody defines parameters for BodyWithAddProps.
type BodyWithAddPropsJSONBody struct {
	Inner                BodyWithAddPropsJSONBody_Inner `json:"inner"`
	Name                 string                         `json:"name"`
	AdditionalProperties map[string]interface{}         `json:"-"`
}

// BodyWithAddPropsJSONBody_Inner defines parameters for BodyWithAddProps.
type BodyWithAddPropsJSONBody_Inner struct {
	AdditionalProperties map[string]int `json:"-"`
}

// EnsureEverythingIsReferencedJSONRequestBody defines body for EnsureEverythingIsReferenced for application/json ContentType.
type EnsureEverythingIsReferencedJSONRequestBody RequestBody

// BodyWithAddPropsJSONRequestBody defines body for BodyWithAddProps for application/json ContentType.
type BodyWithAddPropsJSONRequestBody BodyWithAddPropsJSONBody

// Getter for additional properties for ParamsWithAddPropsParams_P1. Returns the specified
// element and whether it was found
func (a ParamsWithAddPropsParams_P1) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ParamsWithAddPropsParams_P1
func (a *ParamsWithAddPropsParams_P1) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ParamsWithAddPropsParams_P1 to handle AdditionalProperties
func (a *ParamsWithAddPropsParams_P1) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ParamsWithAddPropsParams_P1 to handle AdditionalProperties
func (a ParamsWithAddPropsParams_P1) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ParamsWithAddPropsParams_P2_Inner. Returns the specified
// element and whether it was found
func (a ParamsWithAddPropsParams_P2_Inner) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ParamsWithAddPropsParams_P2_Inner
func (a *ParamsWithAddPropsParams_P2_Inner) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ParamsWithAddPropsParams_P2_Inner to handle AdditionalProperties
func (a *ParamsWithAddPropsParams_P2_Inner) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ParamsWithAddPropsParams_P2_Inner to handle AdditionalProperties
func (a ParamsWithAddPropsParams_P2_Inner) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BodyWithAddPropsJSONBody. Returns the specified
// element and whether it was found
func (a BodyWithAddPropsJSONBody) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BodyWithAddPropsJSONBody
func (a *BodyWithAddPropsJSONBody) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BodyWithAddPropsJSONBody to handle AdditionalProperties
func (a *BodyWithAddPropsJSONBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["inner"]; found {
		err = json.Unmarshal(raw, &a.Inner)
		if err != nil {
			return fmt.Errorf("error reading 'inner': %w", err)
		}
		delete(object, "inner")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BodyWithAddPropsJSONBody to handle AdditionalProperties
func (a BodyWithAddPropsJSONBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["inner"], err = json.Marshal(a.Inner)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'inner': %w", err)
	}

	object["name"], err = json.Marshal(a.Name)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'name': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BodyWithAddPropsJSONBody_Inner. Returns the specified
// element and whether it was found
func (a BodyWithAddPropsJSONBody_Inner) Get(fieldName string) (value int, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BodyWithAddPropsJSONBody_Inner
func (a *BodyWithAddPropsJSONBody_Inner) Set(fieldName string, value int) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]int)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BodyWithAddPropsJSONBody_Inner to handle AdditionalProperties
func (a *BodyWithAddPropsJSONBody_Inner) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]int)
		for fieldName, fieldBuf := range object {
			var fieldVal int
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BodyWithAddPropsJSONBody_Inner to handle AdditionalProperties
func (a BodyWithAddPropsJSONBody_Inner) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AdditionalPropertiesObject1. Returns the specified
// element and whether it was found
func (a AdditionalPropertiesObject1) Get(fieldName string) (value int, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AdditionalPropertiesObject1
func (a *AdditionalPropertiesObject1) Set(fieldName string, value int) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]int)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AdditionalPropertiesObject1 to handle AdditionalProperties
func (a *AdditionalPropertiesObject1) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
		delete(object, "id")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if raw, found := object["optional"]; found {
		err = json.Unmarshal(raw, &a.Optional)
		if err != nil {
			return fmt.Errorf("error reading 'optional': %w", err)
		}
		delete(object, "optional")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]int)
		for fieldName, fieldBuf := range object {
			var fieldVal int
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AdditionalPropertiesObject1 to handle AdditionalProperties
func (a AdditionalPropertiesObject1) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["id"], err = json.Marshal(a.Id)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'id': %w", err)
	}

	object["name"], err = json.Marshal(a.Name)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'name': %w", err)
	}

	if a.Optional != nil {
		object["optional"], err = json.Marshal(a.Optional)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'optional': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AdditionalPropertiesObject3. Returns the specified
// element and whether it was found
func (a AdditionalPropertiesObject3) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AdditionalPropertiesObject3
func (a *AdditionalPropertiesObject3) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AdditionalPropertiesObject3 to handle AdditionalProperties
func (a *AdditionalPropertiesObject3) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AdditionalPropertiesObject3 to handle AdditionalProperties
func (a AdditionalPropertiesObject3) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["name"], err = json.Marshal(a.Name)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'name': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AdditionalPropertiesObject4. Returns the specified
// element and whether it was found
func (a AdditionalPropertiesObject4) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AdditionalPropertiesObject4
func (a *AdditionalPropertiesObject4) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AdditionalPropertiesObject4 to handle AdditionalProperties
func (a *AdditionalPropertiesObject4) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["inner"]; found {
		err = json.Unmarshal(raw, &a.Inner)
		if err != nil {
			return fmt.Errorf("error reading 'inner': %w", err)
		}
		delete(object, "inner")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AdditionalPropertiesObject4 to handle AdditionalProperties
func (a AdditionalPropertiesObject4) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["inner"], err = json.Marshal(a.Inner)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'inner': %w", err)
	}

	object["name"], err = json.Marshal(a.Name)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'name': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AdditionalPropertiesObject4_Inner. Returns the specified
// element and whether it was found
func (a AdditionalPropertiesObject4_Inner) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AdditionalPropertiesObject4_Inner
func (a *AdditionalPropertiesObject4_Inner) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AdditionalPropertiesObject4_Inner to handle AdditionalProperties
func (a *AdditionalPropertiesObject4_Inner) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AdditionalPropertiesObject4_Inner to handle AdditionalProperties
func (a AdditionalPropertiesObject4_Inner) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["name"], err = json.Marshal(a.Name)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'name': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AdditionalPropertiesObject5. Returns the specified
// element and whether it was found
func (a AdditionalPropertiesObject5) Get(fieldName string) (value SchemaObject, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AdditionalPropertiesObject5
func (a *AdditionalPropertiesObject5) Set(fieldName string, value SchemaObject) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]SchemaObject)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AdditionalPropertiesObject5 to handle AdditionalProperties
func (a *AdditionalPropertiesObject5) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]SchemaObject)
		for fieldName, fieldBuf := range object {
			var fieldVal SchemaObject
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AdditionalPropertiesObject5 to handle AdditionalProperties
func (a AdditionalPropertiesObject5) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AdditionalPropertiesObject6_Item. Returns the specified
// element and whether it was found
func (a AdditionalPropertiesObject6_Item) Get(fieldName string) (value SchemaObject, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AdditionalPropertiesObject6_Item
func (a *AdditionalPropertiesObject6_Item) Set(fieldName string, value SchemaObject) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]SchemaObject)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AdditionalPropertiesObject6_Item to handle AdditionalProperties
func (a *AdditionalPropertiesObject6_Item) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]SchemaObject)
		for fieldName, fieldBuf := range object {
			var fieldVal SchemaObject
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AdditionalPropertiesObject6_Item to handle AdditionalProperties
func (a AdditionalPropertiesObject6_Item) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

func (t AnyOfObject1) AsOneOfVariant4() (OneOfVariant4, error) {
	var body OneOfVariant4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *AnyOfObject1) FromOneOfVariant4(v OneOfVariant4) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t AnyOfObject1) AsOneOfVariant5() (OneOfVariant5, error) {
	var body OneOfVariant5
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *AnyOfObject1) FromOneOfVariant5(v OneOfVariant5) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t AnyOfObject1) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AnyOfObject1) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

func (t OneOfObject1) AsOneOfVariant1() (OneOfVariant1, error) {
	var body OneOfVariant1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject1) FromOneOfVariant1(v OneOfVariant1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject1) AsOneOfVariant2() (OneOfVariant2, error) {
	var body OneOfVariant2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject1) FromOneOfVariant2(v OneOfVariant2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject1) AsOneOfVariant3() (OneOfVariant3, error) {
	var body OneOfVariant3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject1) FromOneOfVariant3(v OneOfVariant3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject1) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *OneOfObject1) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

func (t OneOfObject10) AsOneOfObject100() (OneOfObject100, error) {
	var body OneOfObject100
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject10) FromOneOfObject100(v OneOfObject100) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject10) AsOneOfObject101() (OneOfObject101, error) {
	var body OneOfObject101
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject10) FromOneOfObject101(v OneOfObject101) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject10) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return nil, err
	}

	object["one"], err = json.Marshal(t.One)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'one': %w", err)
	}

	object["three"], err = json.Marshal(t.Three)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'three': %w", err)
	}

	object["two"], err = json.Marshal(t.Two)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'two': %w", err)
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *OneOfObject10) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["one"]; found {
		err = json.Unmarshal(raw, &t.One)
		if err != nil {
			return fmt.Errorf("error reading 'one': %w", err)
		}
	}

	if raw, found := object["three"]; found {
		err = json.Unmarshal(raw, &t.Three)
		if err != nil {
			return fmt.Errorf("error reading 'three': %w", err)
		}
	}

	if raw, found := object["two"]; found {
		err = json.Unmarshal(raw, &t.Two)
		if err != nil {
			return fmt.Errorf("error reading 'two': %w", err)
		}
	}

	return err
}

func (t OneOfObject2) AsOneOfObject20() (OneOfObject20, error) {
	var body OneOfObject20
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject2) FromOneOfObject20(v OneOfObject20) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject2) AsOneOfObject21() (OneOfObject21, error) {
	var body OneOfObject21
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject2) FromOneOfObject21(v OneOfObject21) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject2) AsOneOfObject22() (OneOfObject22, error) {
	var body OneOfObject22
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject2) FromOneOfObject22(v OneOfObject22) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject2) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *OneOfObject2) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

func (t OneOfObject3_Union) AsOneOfVariant1() (OneOfVariant1, error) {
	var body OneOfVariant1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject3_Union) FromOneOfVariant1(v OneOfVariant1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject3_Union) AsOneOfVariant2() (OneOfVariant2, error) {
	var body OneOfVariant2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject3_Union) FromOneOfVariant2(v OneOfVariant2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject3_Union) AsOneOfVariant3() (OneOfVariant3, error) {
	var body OneOfVariant3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject3_Union) FromOneOfVariant3(v OneOfVariant3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject3_Union) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *OneOfObject3_Union) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

func (t OneOfObject4) AsOneOfVariant1() (OneOfVariant1, error) {
	var body OneOfVariant1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject4) FromOneOfVariant1(v OneOfVariant1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject4) AsOneOfVariant2() (OneOfVariant2, error) {
	var body OneOfVariant2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject4) FromOneOfVariant2(v OneOfVariant2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject4) AsOneOfVariant3() (OneOfVariant3, error) {
	var body OneOfVariant3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject4) FromOneOfVariant3(v OneOfVariant3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject4) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return nil, err
	}

	object["fixedProperty"], err = json.Marshal(t.FixedProperty)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'fixedProperty': %w", err)
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *OneOfObject4) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["fixedProperty"]; found {
		err = json.Unmarshal(raw, &t.FixedProperty)
		if err != nil {
			return fmt.Errorf("error reading 'fixedProperty': %w", err)
		}
	}

	return err
}

func (t OneOfObject5) AsOneOfVariant4() (OneOfVariant4, error) {
	var body OneOfVariant4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject5) FromOneOfVariant4(v OneOfVariant4) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject5) AsOneOfVariant5() (OneOfVariant5, error) {
	var body OneOfVariant5
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject5) FromOneOfVariant5(v OneOfVariant5) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject5) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"discriminator"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t OneOfObject5) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *OneOfObject5) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

func (t OneOfObject6) AsOneOfVariant4() (OneOfVariant4, error) {
	var body OneOfVariant4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject6) FromOneOfVariant4(v OneOfVariant4) error {
	v.Discriminator = "v4"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject6) AsOneOfVariant5() (OneOfVariant5, error) {
	var body OneOfVariant5
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject6) FromOneOfVariant5(v OneOfVariant5) error {
	v.Discriminator = "v5"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject6) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"discriminator"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t OneOfObject6) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "v4":
		return t.AsOneOfVariant4()
	case "v5":
		return t.AsOneOfVariant5()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t OneOfObject6) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *OneOfObject6) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

func (t OneOfObject7_Item) AsOneOfVariant1() (OneOfVariant1, error) {
	var body OneOfVariant1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject7_Item) FromOneOfVariant1(v OneOfVariant1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject7_Item) AsOneOfVariant2() (OneOfVariant2, error) {
	var body OneOfVariant2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject7_Item) FromOneOfVariant2(v OneOfVariant2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject7_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *OneOfObject7_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

func (t OneOfObject8) AsOneOfVariant1() (OneOfVariant1, error) {
	var body OneOfVariant1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject8) FromOneOfVariant1(v OneOfVariant1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject8) AsOneOfVariant2() (OneOfVariant2, error) {
	var body OneOfVariant2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject8) FromOneOfVariant2(v OneOfVariant2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject8) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return nil, err
	}

	object["fixed"], err = json.Marshal(t.Fixed)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'fixed': %w", err)
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *OneOfObject8) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["fixed"]; found {
		err = json.Unmarshal(raw, &t.Fixed)
		if err != nil {
			return fmt.Errorf("error reading 'fixed': %w", err)
		}
	}

	return err
}

func (t OneOfObject9) AsOneOfVariant1() (OneOfVariant1, error) {
	var body OneOfVariant1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject9) FromOneOfVariant1(v OneOfVariant1) error {
	t.Type = "v1"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject9) AsOneOfVariant6() (OneOfVariant6, error) {
	var body OneOfVariant6
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject9) FromOneOfVariant6(v OneOfVariant6) error {
	t.Type = "v6"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject9) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t OneOfObject9) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "v1":
		return t.AsOneOfVariant1()
	case "v6":
		return t.AsOneOfVariant6()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t OneOfObject9) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return nil, err
	}

	object["type"], err = json.Marshal(t.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *OneOfObject9) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &t.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
	}

	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// EnsureEverythingIsReferenced request with any body
	EnsureEverythingIsReferencedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnsureEverythingIsReferenced(ctx context.Context, body EnsureEverythingIsReferencedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ParamsWithAddProps request
	ParamsWithAddProps(ctx context.Context, params *ParamsWithAddPropsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BodyWithAddProps request with any body
	BodyWithAddPropsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BodyWithAddProps(ctx context.Context, body BodyWithAddPropsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) EnsureEverythingIsReferencedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnsureEverythingIsReferencedRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnsureEverythingIsReferenced(ctx context.Context, body EnsureEverythingIsReferencedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnsureEverythingIsReferencedRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ParamsWithAddProps(ctx context.Context, params *ParamsWithAddPropsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewParamsWithAddPropsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BodyWithAddPropsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBodyWithAddPropsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BodyWithAddProps(ctx context.Context, body BodyWithAddPropsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBodyWithAddPropsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewEnsureEverythingIsReferencedRequest calls the generic EnsureEverythingIsReferenced builder with application/json body
func NewEnsureEverythingIsReferencedRequest(server string, body EnsureEverythingIsReferencedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnsureEverythingIsReferencedRequestWithBody(server, "application/json", bodyReader)
}

// NewEnsureEverythingIsReferencedRequestWithBody generates requests for EnsureEverythingIsReferenced with any type of body
func NewEnsureEverythingIsReferencedRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ensure-everything-is-referenced")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewParamsWithAddPropsRequest generates requests for ParamsWithAddProps
func NewParamsWithAddPropsRequest(server string, params *ParamsWithAddPropsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/params_with_add_props")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("simple", true, "p1", runtime.ParamLocationQuery, params.P1); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "p2", runtime.ParamLocationQuery, params.P2); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBodyWithAddPropsRequest calls the generic BodyWithAddProps builder with application/json body
func NewBodyWithAddPropsRequest(server string, body BodyWithAddPropsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBodyWithAddPropsRequestWithBody(server, "application/json", bodyReader)
}

// NewBodyWithAddPropsRequestWithBody generates requests for BodyWithAddProps with any type of body
func NewBodyWithAddPropsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/params_with_add_props")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// EnsureEverythingIsReferenced request with any body
	EnsureEverythingIsReferencedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnsureEverythingIsReferencedResponse, error)

	EnsureEverythingIsReferencedWithResponse(ctx context.Context, body EnsureEverythingIsReferencedJSONRequestBody, reqEditors ...RequestEditorFn) (*EnsureEverythingIsReferencedResponse, error)

	// ParamsWithAddProps request
	ParamsWithAddPropsWithResponse(ctx context.Context, params *ParamsWithAddPropsParams, reqEditors ...RequestEditorFn) (*ParamsWithAddPropsResponse, error)

	// BodyWithAddProps request with any body
	BodyWithAddPropsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BodyWithAddPropsResponse, error)

	BodyWithAddPropsWithResponse(ctx context.Context, body BodyWithAddPropsJSONRequestBody, reqEditors ...RequestEditorFn) (*BodyWithAddPropsResponse, error)
}

type EnsureEverythingIsReferencedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// simple anyOf case
		AnyOf1 *AnyOfObject1 `json:"anyOf1,omitempty"`

		// Has additional properties with schema for dictionaries
		Five *AdditionalPropertiesObject5 `json:"five,omitempty"`

		// Has anonymous field which has additional properties
		Four      *AdditionalPropertiesObject4 `json:"four,omitempty"`
		JsonField *ObjectWithJsonField         `json:"jsonField,omitempty"`

		// Has additional properties of type int
		One *AdditionalPropertiesObject1 `json:"one,omitempty"`

		// oneOf with references and no disciminator
		OneOf1 *OneOfObject1 `json:"oneOf1,omitempty"`

		// fixed properties, variable required - will compile, but not much sense
		OneOf10 *OneOfObject10 `json:"oneOf10,omitempty"`

		// oneOf with inline elements
		OneOf2 *OneOfObject2 `json:"oneOf2,omitempty"`

		// inline OneOf
		OneOf3 *OneOfObject3 `json:"oneOf3,omitempty"`

		// oneOf plus fixed type - custom marshaling/unmarshaling
		OneOf4 *OneOfObject4 `json:"oneOf4,omitempty"`

		// oneOf with disciminator but no mapping
		OneOf5 *OneOfObject5 `json:"oneOf5,omitempty"`

		// oneOf with discriminator and mapping
		OneOf6 *OneOfObject6 `json:"oneOf6,omitempty"`

		// array of oneOf
		OneOf7 *OneOfObject7 `json:"oneOf7,omitempty"`

		// oneOf with fixed properties
		OneOf8 *OneOfObject8 `json:"oneOf8,omitempty"`

		// oneOf with fixed descriminator
		OneOf9 *OneOfObject9 `json:"oneOf9,omitempty"`

		// Array of object with additional properties
		Six *AdditionalPropertiesObject6 `json:"six,omitempty"`

		// Allows any additional property
		Three *AdditionalPropertiesObject3 `json:"three,omitempty"`

		// Does not allow additional properties
		Two *AdditionalPropertiesObject2 `json:"two,omitempty"`
	}
	JSONDefault *struct {
		Field SchemaObject `json:"Field"`
	}
}

// Status returns HTTPResponse.Status
func (r EnsureEverythingIsReferencedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnsureEverythingIsReferencedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ParamsWithAddPropsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ParamsWithAddPropsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ParamsWithAddPropsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BodyWithAddPropsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BodyWithAddPropsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BodyWithAddPropsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// EnsureEverythingIsReferencedWithBodyWithResponse request with arbitrary body returning *EnsureEverythingIsReferencedResponse
func (c *ClientWithResponses) EnsureEverythingIsReferencedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnsureEverythingIsReferencedResponse, error) {
	rsp, err := c.EnsureEverythingIsReferencedWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnsureEverythingIsReferencedResponse(rsp)
}

func (c *ClientWithResponses) EnsureEverythingIsReferencedWithResponse(ctx context.Context, body EnsureEverythingIsReferencedJSONRequestBody, reqEditors ...RequestEditorFn) (*EnsureEverythingIsReferencedResponse, error) {
	rsp, err := c.EnsureEverythingIsReferenced(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnsureEverythingIsReferencedResponse(rsp)
}

// ParamsWithAddPropsWithResponse request returning *ParamsWithAddPropsResponse
func (c *ClientWithResponses) ParamsWithAddPropsWithResponse(ctx context.Context, params *ParamsWithAddPropsParams, reqEditors ...RequestEditorFn) (*ParamsWithAddPropsResponse, error) {
	rsp, err := c.ParamsWithAddProps(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseParamsWithAddPropsResponse(rsp)
}

// BodyWithAddPropsWithBodyWithResponse request with arbitrary body returning *BodyWithAddPropsResponse
func (c *ClientWithResponses) BodyWithAddPropsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BodyWithAddPropsResponse, error) {
	rsp, err := c.BodyWithAddPropsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBodyWithAddPropsResponse(rsp)
}

func (c *ClientWithResponses) BodyWithAddPropsWithResponse(ctx context.Context, body BodyWithAddPropsJSONRequestBody, reqEditors ...RequestEditorFn) (*BodyWithAddPropsResponse, error) {
	rsp, err := c.BodyWithAddProps(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBodyWithAddPropsResponse(rsp)
}

// ParseEnsureEverythingIsReferencedResponse parses an HTTP response from a EnsureEverythingIsReferencedWithResponse call
func ParseEnsureEverythingIsReferencedResponse(rsp *http.Response) (*EnsureEverythingIsReferencedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnsureEverythingIsReferencedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// simple anyOf case
			AnyOf1 *AnyOfObject1 `json:"anyOf1,omitempty"`

			// Has additional properties with schema for dictionaries
			Five *AdditionalPropertiesObject5 `json:"five,omitempty"`

			// Has anonymous field which has additional properties
			Four      *AdditionalPropertiesObject4 `json:"four,omitempty"`
			JsonField *ObjectWithJsonField         `json:"jsonField,omitempty"`

			// Has additional properties of type int
			One *AdditionalPropertiesObject1 `json:"one,omitempty"`

			// oneOf with references and no disciminator
			OneOf1 *OneOfObject1 `json:"oneOf1,omitempty"`

			// fixed properties, variable required - will compile, but not much sense
			OneOf10 *OneOfObject10 `json:"oneOf10,omitempty"`

			// oneOf with inline elements
			OneOf2 *OneOfObject2 `json:"oneOf2,omitempty"`

			// inline OneOf
			OneOf3 *OneOfObject3 `json:"oneOf3,omitempty"`

			// oneOf plus fixed type - custom marshaling/unmarshaling
			OneOf4 *OneOfObject4 `json:"oneOf4,omitempty"`

			// oneOf with disciminator but no mapping
			OneOf5 *OneOfObject5 `json:"oneOf5,omitempty"`

			// oneOf with discriminator and mapping
			OneOf6 *OneOfObject6 `json:"oneOf6,omitempty"`

			// array of oneOf
			OneOf7 *OneOfObject7 `json:"oneOf7,omitempty"`

			// oneOf with fixed properties
			OneOf8 *OneOfObject8 `json:"oneOf8,omitempty"`

			// oneOf with fixed descriminator
			OneOf9 *OneOfObject9 `json:"oneOf9,omitempty"`

			// Array of object with additional properties
			Six *AdditionalPropertiesObject6 `json:"six,omitempty"`

			// Allows any additional property
			Three *AdditionalPropertiesObject3 `json:"three,omitempty"`

			// Does not allow additional properties
			Two *AdditionalPropertiesObject2 `json:"two,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Field SchemaObject `json:"Field"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case true:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseParamsWithAddPropsResponse parses an HTTP response from a ParamsWithAddPropsWithResponse call
func ParseParamsWithAddPropsResponse(rsp *http.Response) (*ParamsWithAddPropsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ParamsWithAddPropsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseBodyWithAddPropsResponse parses an HTTP response from a BodyWithAddPropsWithResponse call
func ParseBodyWithAddPropsResponse(rsp *http.Response) (*BodyWithAddPropsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BodyWithAddPropsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /ensure-everything-is-referenced)
	EnsureEverythingIsReferenced(ctx echo.Context) error

	// (GET /params_with_add_props)
	ParamsWithAddProps(ctx echo.Context, params ParamsWithAddPropsParams) error

	// (POST /params_with_add_props)
	BodyWithAddProps(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// EnsureEverythingIsReferenced converts echo context to params.
func (w *ServerInterfaceWrapper) EnsureEverythingIsReferenced(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EnsureEverythingIsReferenced(ctx)
	return err
}

// ParamsWithAddProps converts echo context to params.
func (w *ServerInterfaceWrapper) ParamsWithAddProps(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ParamsWithAddPropsParams
	// ------------- Required query parameter "p1" -------------

	err = runtime.BindQueryParameter("simple", true, true, "p1", ctx.QueryParams(), &params.P1)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter p1: %s", err))
	}

	// ------------- Required query parameter "p2" -------------

	err = runtime.BindQueryParameter("form", true, true, "p2", ctx.QueryParams(), &params.P2)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter p2: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ParamsWithAddProps(ctx, params)
	return err
}

// BodyWithAddProps converts echo context to params.
func (w *ServerInterfaceWrapper) BodyWithAddProps(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BodyWithAddProps(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/ensure-everything-is-referenced", wrapper.EnsureEverythingIsReferenced)
	router.GET(baseURL+"/params_with_add_props", wrapper.ParamsWithAddProps)
	router.POST(baseURL+"/params_with_add_props", wrapper.BodyWithAddProps)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RZW2/buBL+KwTPeVTiW+y2fsvB6WK7wDZBW+w+NEZBS6OIXYlUScqOEei/L0jKsi6U",
	"LLnZotuXxiKH882Fc+Mz9nmScgZMSbx+xgK+ZSDV/3hAwXz4UH446J8+ZwqY0n+SNI2pTxTlbPJVcqa/",
	"ST+ChOi/UsFTEKo45RcKcaD/+K+AEK/xfyYnthNLJCcfzf9326/gK5znngFDBQR4/bk4YaM/K3hSkzQm",
	"tMFSHVLAayyVoOwR5/qfPkOmnMmjMPZHwePfJo+HA5C+oKnGiNf4FkmapDGgo5CIn5gVKPRBt0FANQmJ",
	"70spLKyZEdyxXOFPmYJHELjF/lci0YkWnTSEeIg0MaJMYa+hOhq4z2YkAYfUHuapZeBSSV2n5ghPc9h4",
	"x61HjXg9Wph3ayEksYSm4P/nIBHjCpE45nu3Dr5X7hcSbdEtmhJZS7JbLZBEhB0cUh1aMo3APg72zTjY",
	"xhMZZ4eEZxKF+mqhfUT9CEVdPtq2D2MgzrF9UfGHkVtc3iVaXPbd7uGRa/i931MVIXsICrlAAfXNJmEV",
	"PgL6SkNs+KYQ5KBDi6W3zLpsSxUk8qXEb+EuPhCNyMjBDndhNaLq33j9uZ/NHYO78A8iKGHqBufe8N1L",
	"nG+aVilSgWGNfCJBA7OY/qQq+k1yVmatQW7s4R2JMzAChVwkROE1NonR69g6H7DVHdcKTi73NnJXdFuX",
	"mutV6woCQhDAfNCxIECMo4BKnyaUEcX1DTJ7R1llNsoq81G7FzjfNMSbtuUL6RMEFdf20E6Tb03St2pE",
	"V2hP4xhpfjQGD20zZbJTkvkRksAk1ISvqp8zwBuNuvpR7bm2WyRAL26aUU/TuLzFEpxWtpzHQJhZ2nNX",
	"8sv7zT3vNTdlMWWAIIbEFK9VEYeG6Sb351PcKJZYlmxtnm7c+baYDWsu2ugLyGZTK/9kjNqa8yd00zOG",
	"uukyVBqbdKxd2NSDV8jPpOIJSoiQEYkpe5xk7PTjp7ykTUMZee6PJdEgv6oqa9nr1dWQVVxklJA0tcrR",
	"q6KMaKdAfnhvXLyxnl+izfGJqC7e6qx4JUATpnuEOy6tn/HuZhh2D++WA3F7P6HyXrWVR8qqp4gaZYT6",
	"ATdl46h1KnBf99q6mbp+zOV2X9fx1/TNANns8qnA6PXg2TBxPbxbDdm5cniwkSf/59W8cqjZ6vJcM2NW",
	"O6u8Esz6+WU7rbqPrNtpvtKPO/29TAfO8qYeAlrgW27RKp2GiVc/xxsm7vISPO5ZxRk4HbOJuuO0wJjK",
	"/2xH1rjkDSTFGS7utVauxTykQqr3Xe2P4PEAq5hdXuWojZnUURaamjemvqnASyfGv7/7ZPyMKn08/gRS",
	"oY8gdqbL34GQNtrMrqfXUzv/AkZSitd4cT291hEiJSoy+CfAZCbgCnYgDiqi7PGKyquyETJWfATVDmWf",
	"IioRsCDllCkET1QqiSRHKiIKnfSPfMLQFpAvgCgIEGVIRVQ+MJmCX3RZSm9IRcYgeND9ntavGaK+C/Aa",
	"vzUA35b43skPJ3ReZdx86HKB2kR6Uh1HN6e78+n0O0a6pnGenXPEWqefa7Pv4CxNz4BGH8EzcfkRuuQw",
	"rfagkbRrHmATxuUIZmXKmQ26xi2q6RiyaUk3H0E2L6kWI6gWJdXNCKqbkmo5gmpZUq1GUK1KqlcjqF6V",
	"VK9HUL0uqd6MoHqjqSR9uty/VrXhwmVnLCpTiMtOmLsqxuJNJiRZrLrjVxGiJo3XJ0s9SYkgifyiy8ov",
	"JAi+6KgkOwP3LdLB3xahhhIUCDvwImjLg0Mx9y4ylHs+6ojT9waFDgy3gWluzYC8ZGCKSUcKKXd0D9oN",
	"M6opvmUgDse6ZY3TGa5mUjtgP0XnvjF8K81LdTDJ1A5BTTF7Hi2rvBmYKXv50FEokQEEEimOtvDAVCaY",
	"SYGKI1LstFONULeyDrSacs/FX90amPdqYNT7hGsg13BW17vCJtelfCWNsiyOdWfBpcP7zOQfFRm56m46",
	"5xLK9GpABfjKqRBP++kD61V8fah/3+ezughoeKy48LV6+JvPUDO0O4qxDz/HJ7+jnfKmr+Rtw+V5/ncA",
	"AAD//255GrzSHwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
